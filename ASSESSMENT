"""
Name: Li Jingyang
Date started: 2023/12/12
GitHub URL:
"""

import csv

FILE_NAME = "songs.csv"
LEARNED = 'l'
UNLEARNED = 'u'


def load_file():
    """
    Load songs from a CSV file.
    Parameters:
    - None
    Returns:
    - list: A list of lists representing rows in the CSV file.
    Raises:
    - FileNotFoundError: If the specified CSV file is not found.
    """
    try:
        with open(FILE_NAME) as file:
            reader = csv.reader(file)
            return [row for row in reader]
    except FileNotFoundError:
        return []


def save_file(songs):
    """
    Save songs to a CSV file.
    Parameters:
    - songs (list): A list of songs representing rows to be written to the CSV file.
    Returns:
    - None
    Note:
    - This function will overwrite the existing content of the CSV file.
    """
    with open(FILE_NAME, 'w', newline='') as file:
        writer = csv.writer(file)
        writer.writerows(songs)


def display_menu():
    """
    Display the menu options for a song management system.
    Options:
    D - Display songs
    A - Add new song
    C - Complete a song
    Q - Quit
    """
    print("Menu:")
    print("D - Display songs")
    print("A - Add new song")
    print("C - Complete a song")
    print("Q - Quit")


def display_songs(songs):
    """
    Display information about songs, including title, artist, year, and status.
    Parameters:
    - songs (list): A list of tuples representing songs, where each tuple contains
                   information about title, artist, year, and status.
    Returns:
    - None
    """
    if not songs:
        print("No songs available.")
        return

    index = 0
    count_learned = 0
    count_unlearned = 0
    for song in songs:
        index += 1
        title, artist, year, status = song
        if status == UNLEARNED:
            mark = "*"
            count_unlearned += 1
        else:
            mark = ""
            count_learned += 1
        print(f"{index:2}. {mark:2} {title:<30} - {artist:<20} ({year:<4})")
    print(f"{count_learned} song(s) learned, {count_unlearned} song(s) still to learn.")


def input_str(prompt):
    """
    Get a non-blank string input from the user.
    Parameters:
    - hint (str): The prompt to display to the user.
    Returns:
    - str: A non-blank string entered by the user.
    """
    # Get input from the user using the provided hint
    user_input = input(prompt)
    # Continue to prompt the user until a non-blank string is entered
    while user_input.strip() == "":
        print("Input cannot be blank.")
        user_input = input(prompt)
    return user_input


def add_song(songs):
    """
    Add a new song to the list.
    Parameters:
    - songs (list): A list of lists representing existing songs.
    Returns:
    - None
    """
    print("Enter details for a new song.")
    title = input_str("Title: ")
    artist = input_str("Artist: ")
    while True:
        user_input = input("Year: ")
        try:
            year = int(user_input)
            if year > 0:
                break
            else:
                print("Number must be > 0.")
        except ValueError:
            print("Invalid input; enter a valid number.")
    # Add the new song to the songs list
    new_song = [title, artist, str(year), UNLEARNED]
    songs.append(new_song)

    print(f"{title} by {artist} ({year}) added to the song list.")


def complete_song(songs):
    """
    Mark a song as learned from the list of songs.
    Parameters:
    - songs (list): A list of lists representing existing songs.
    Returns:
    - None
    """
    count_unlearned = 0
    for song in songs:
        status = song[3]
        if status == UNLEARNED:
            count_unlearned += 1
    if count_unlearned == 0:
        # If there are no unlearned songs, print a message and return
        print("No more songs to learn!")
        return

    print("Enter the number of a song to mark as learned.")
    while True:
        try:
            user_input = int(input(">>> "))
            if 0 < user_input <= len(songs):
                index = user_input - 1
                if songs[index][3] == UNLEARNED:
                    # Mark the song as learned
                    print(f"{songs[index][0]} by {songs[index][1]} learned")
                    songs[index][3] = LEARNED
                else:
                    # If the song is already learned, print a message
                    print(f"You have already learned {songs[index][0]}")
                return
            else:
                # If the entered song number is invalid, print a message
                print("Invalid song number")
        except ValueError:
            # If the entered input is not a number, print a message
            print("Invalid input; enter a valid number.")


def main():
    """
    The main function for the Song List 1.0 program.
    This function initializes the program, loads songs from a file, and enters a menu loop
    to allow users to perform various actions like displaying songs, adding a new song,
    marking a song as learned, and quitting the program.
    Returns:
    - None
    """
    print("Song List 1.0 - by Li Jingyang")

    # Load songs from a file and sort them by year
    songs = load_file()
    songs = sorted(songs, key=lambda x: int(x[2]))
    print(f"{len(songs)} songs loaded.")

    while True:
        # Display the menu and get the user's choice
        display_menu()
        choice = input(">>> ").lower()

        if choice == 'd':
            display_songs(songs)
        elif choice == 'a':
            # Add a new song and update the sorted song list
            add_song(songs)
            songs = sorted(songs, key=lambda x: int(x[2]))
        elif choice == 'c':
            complete_song(songs)
        elif choice == 'q':
            save_file(songs)
            print(f"{len(songs)} songs saved to {FILE_NAME}")
            print("Make some music!")
            break
        else:
            print("Invalid menu choice")


if __name__ == '__main__':
    main()
